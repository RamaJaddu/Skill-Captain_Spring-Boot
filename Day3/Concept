GET API to fetch data from MySQL database

To Do

Concept:

In this tutorial, we will demonstrates how to connect to a MySQL database and retrieve data, which will then be shown in the GET API:

Step 1: Set Up the Database
1. Install MySQL on your system if you haven't already.
2. Create a new database for the project.

Step 2: Add MySQL Dependency
1. Open the `pom.xml` file of your Spring Boot project.
2. Add the MySQL connector dependency:



<dependencies>
    <!-- Other dependencies -->
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-java</artifactId>
    </dependency>
</dependencies>

 

Step 3: Configure Database Connection

1. Open the `application.properties` file in the `src/main/resources` directory.
2. Add the following properties in your application.properties to configure the MySQL connection:

 
spring.datasource.url=jdbc:mysql://localhost:3306/your_database_name
spring.datasource.username=your_username
spring.datasource.password=your_password
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
 

Step 4: Create a Model Class

1. Create a new package, e.g., `com.example.demo.model`, in the source directory.
2. Inside the package, create a Java class representing your data model, e.g., `User`.
3. Annotate the class with `@Entity` to map it to a database table.
4. Define the necessary attributes, getters, and setters.

Example `User` class:


 
package com.example.demo.model;

package app.skillcaptain.unicorn.user.auth;

import javax.persistence.GeneratedValue;
import javax.persistence.GenerationType;
import javax.persistence.Id;

public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;
    private String email;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getEmail() {
        return email;
    }

    public void setEmail(String email) {
        this.email = email;
    }
}
 



Step 5: Create a Repository Interface
1. Create a new package, e.g., `com.example.demo.repository`, in the source directory.
2. Inside the package, create a Java interface, e.g., `UserRepository`, that extends `JpaRepository`.
3. `JpaRepository` provides the necessary CRUD operations for the `User` entity.

Example `UserRepository` interface:


 
package com.example.demo.repository;

import com.example.demo.model.User;
import org.springframework.data.jpa.repository.JpaRepository;

public interface UserRepository extends JpaRepository {
    
}
 

Step 6: Create a Controller Method to Fetch Data
1. Open the `HelloWorldController` class.
2. Inject an instance of `UserRepository` using constructor injection.
3. Create a new method that handles the GET request to fetch user data.
4. Inside the method, call the `findAll()` method of the `UserRepository` to retrieve all users from the database.
5. Return the list of users as the API response.

Updated `HelloWorldController` class:


 
package com.example.demo;

import com.example.demo.model.User;
import com.example.demo.repository.UserRepository;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.List;

@RestController
public class HelloWorldController {
    
    private final UserRepository userRepository;
    
    public HelloWorldController(UserRepository userRepository) {
        this.userRepository = userRepository;
    }
    
    @GetMapping("/users")
    public List getUsers() {
        return userRepository.findAll();
    }
    
    @GetMapping("/")
    public String helloWorld() {
        return "Hello, World!";
    }
}
 

Step 7: Build and Run the Application
1. Build and run the application using the instructions provided in the tutorial.

Step 8: Test the API
1. Send a GET request to `http://localhost:8080/users`.

The API should return a list of users fetched from the MySQL database.
Congratulations! You have extended the "Hello World" REST API to connect to a MySQL database and retrieve data to be shown in a GET API. This example demonstrates the integration of Spring Data JPA with MySQL to perform database operations. You can further enhance the API by adding more complex queries or implementing additional endpoints to manipulate the user data in the database.




Resources:

https://spring.io/guides/gs/accessing-data-jpa
